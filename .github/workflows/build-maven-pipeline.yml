name: Build mvn Spring app

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      JDK_VERSION:
        required: true
        type: string
      MAVEN_VERSION:
        required: true
        type: string
      USE_MAVEN_PROXY_SETTINGS:
        required: true
        type: string
    secrets:
      VAULT_URL:
        required: true
      VAULT_SECRET_PATH:
        required: true
      VAULT_ROLE_ID:
        required: true
      VAULT_SECRET_ID:
        required: true

env:
  MAVEN_INFO: "--batch-mode -Dmaven.repo.local=.m2/repository -Dbuild.tag=$GITHUB_REF_NAME -Dbuild.commit-id-short=$GITHUB_SHA -Dbuild.commit-id-long=$GITHUB_SHA -Dbuild.pipeline-id=$GITHUB_RUN_ID"

jobs:
  build-and-test:
    name: Build and Test
    runs-on: [self-hosted-linux]
    steps:
      - name: Import http proxy secrets from Vault
        id: import-secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            ${{ secrets.VAULT_SECRET_PATH }}/ci-proxy *

      - name: Set proxy environment variables
        run: |
          echo "HTTPS_PROXY_URL=$(echo ${{ steps.import-secrets.outputs.HTTPS_PROXY_URL }})" >> $GITHUB_ENV
          echo "PROXY_PORT=$(echo ${{ steps.import-secrets.outputs.PROXY_PORT }})" >> $GITHUB_ENV
          echo "HTTP_PROXY_URL=$(echo ${{ steps.import-secrets.outputs.HTTP_PROXY_URL }})" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ inputs.JDK_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JDK_VERSION  }}
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven
        run: |
          sudo apt-get update -y
          sudo apt-get install wget -y
          wget https://downloads.apache.org/maven/maven-3/${{ inputs.MAVEN_VERSION }}/binaries/apache-maven-${{ inputs.MAVEN_VERSION }}-bin.tar.gz
          tar xzf apache-maven-${{ inputs.MAVEN_VERSION }}-bin.tar.gz
          sudo mv apache-maven-${{ inputs.MAVEN_VERSION }} /opt/
          sudo ln -s /opt/apache-maven-${{ inputs.MAVEN_VERSION }}/bin/mvn /usr/local/bin/mvn
          echo "PATH=/opt/apache-maven-${{ inputs.MAVEN_VERSION }}/bin:$PATH" >> $GITHUB_ENV
          mvn -v

      - name: Build and Test
        if: ${{ inputs.USE_MAVEN_PROXY_SETTINGS == 'true' }}
        run: |
          sed -i "s/https_proxy_host/${{ steps.import-secrets.outputs.HTTPS_PROXY_URL }}/g" .m2/settings.xml
          sed -i "s/https_proxy_port/${{ steps.import-secrets.outputs.PROXY_PORT }}/g" .m2/settings.xml
          sed -i "s/http_proxy_host/${{ steps.import-secrets.outputs.HTTP_PROXY_URL }}/g" .m2/settings.xml
          sed -i "s/http_proxy_port/${{ steps.import-secrets.outputs.PROXY_PORT }}/g" .m2/settings.xml
          mvn -e -s .m2/settings.xml ${{ env.MAVEN_INFO }} verify

      - name: Set artifact id
        run: |
          echo "ARTIFACT_ID=$(ls target/ | grep -o ".*.jar" | head -1)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.jar
          path: target/${{ env.ARTIFACT_ID }}

      - name: Cache .m2/repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  build-and-publish-docker-image:
    needs: build-and-test
    name: Create and push Docker image
    uses: NationalLibraryOfNorway/tekst-workflows/.github/workflows/build-and-publish-docker-image.yml@main
    with:
      USE_HARBOR: true
      ARTIFACT_FILE_NAME: app.jar
    secrets:
      VAULT_URL: ${{ secrets.VAULT_URL }}
      VAULT_SECRET_PATH: ${{ secrets.VAULT_SECRET_PATH }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}

  deploy-to-k8s:
    uses: NationalLibraryOfNorway/tekst-workflows/.github/workflows/kubernetes-deploy.yml@main
    needs: build-and-publish-docker-image
    with:
      ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
      IMAGE_VERSION: ${{ needs.build-and-publish-docker-image.outputs.image_version }}
    secrets:
      VAULT_URL: ${{ secrets.VAULT_URL }}
      VAULT_SECRET_PATH: ${{ secrets.VAULT_SECRET_PATH }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}