name: Maven Verify and Upload Artifact

on:
  workflow_call:
    inputs:
      JDK_VERSION:
        required: true
        type: string
      MAVEN_VERSION:
        required: true
        type: string
      USE_MAVEN_SETTINGS_FILE:
        required: true
        type: string
      ENVIRONMENT:
        required: false
        type: string
        default: nextjs
    secrets:
      VAULT_URL:
        required: true
      VAULT_SECRET_PATH:
        required: true
      VAULT_ROLE_ID:
        required: true
      VAULT_SECRET_ID:
        required: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: [self-hosted-linux]
    steps:
      - name: Import http proxy secrets from Vault
        id: import-secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            ${{ secrets.VAULT_SECRET_PATH }}/proxy1 *

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ inputs.JDK_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JDK_VERSION  }}
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven
        run: |
          sudo apt-get update -y
          sudo apt-get install wget -y
          wget https://downloads.apache.org/maven/maven-3/${{ inputs.MAVEN_VERSION }}/binaries/apache-maven-${{ inputs.MAVEN_VERSION }}-bin.tar.gz
          tar xzf apache-maven-${{ inputs.MAVEN_VERSION }}-bin.tar.gz
          sudo mv apache-maven-${{ inputs.MAVEN_VERSION }} /opt/
          sudo ln -s /opt/apache-maven-${{ inputs.MAVEN_VERSION }}/bin/mvn /usr/local/bin/mvn
          echo "PATH=/opt/apache-maven-${{ inputs.MAVEN_VERSION }}/bin:$PATH" >> $GITHUB_ENV
          mvn -v

      - name: Check source code for existence of Hilla frontend
        shell: bash
        run: |
          if [ -d "src/main/frontend" ]; then
            echo "Hilla frontend found."
            echo "FRONTEND_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No Hilla frontend found."
            echo "FRONTEND_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build frontend env file
        if: ${{ env.FRONTEND_EXISTS == 'true' }}
        uses: NationalLibraryOfNorway/tekst-workflows/.github/action/write-env-file-from-vault@main
        with:
          FRAMEWORK: hilla
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
          VAULT_URL: ${{ secrets.VAULT_URL }}
          VAULT_SECRET_PATH: ${{ secrets.VAULT_SECRET_PATH }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}

      - name: Build and Test with proxy maven settings.xml file
        if: ${{ inputs.USE_MAVEN_SETTINGS_FILE == 'true' }}
        run: |
          sed -i "s/https_proxy_host/${{ steps.import-secrets.outputs.HTTPS_PROXY_URL }}/g" .mvn/settings.xml
          sed -i "s/https_proxy_port/${{ steps.import-secrets.outputs.PROXY_PORT }}/g" .mvn/settings.xml
          sed -i "s/http_proxy_host/${{ steps.import-secrets.outputs.HTTP_PROXY_URL }}/g" .mvn/settings.xml
          sed -i "s/http_proxy_port/${{ steps.import-secrets.outputs.PROXY_PORT }}/g" .mvn/settings.xml
          if [ "${{ env.FRONTEND_EXISTS }}" == "true" ]; then
            echo "Building with Hilla frontend using production profile"
            mvn -e -s .mvn/settings.xml ${{ env.MAVEN_INFO }} verify -Pproduction
          else
            echo "No Hilla frontend found, skipping frontend build"
            mvn -e -s .mvn/settings.xml ${{ env.MAVEN_INFO }} verify
          fi

      - name: Set java proxy flags, build and test
        if: ${{ inputs.USE_MAVEN_SETTINGS_FILE == 'false'}}
        run: |
          echo "MAVEN_PROXY_SETTINGS=-Dhttp.proxyHost=${{ steps.import-secrets.outputs.HTTP_PROXY_URL }} -Dhttp.proxyPort=${{ steps.import-secrets.outputs.PROXY_PORT }} -Dhttps.proxyHost=${{ steps.import-secrets.outputs.HTTPS_PROXY_URL }} -Dhttps.proxyPort=${{ steps.import-secrets.outputs.PROXY_PORT }}" >> $GITHUB_ENV
          if [ "${{ env.FRONTEND_EXISTS }}" == "true" ]; then
            echo "Building with Hilla frontend using production profile"
            mvn -e ${{ env.MAVEN_INFO }} ${{ env.MAVEN_PROXY_SETTINGS }} verify -Pproduction
          else
            echo "No Hilla frontend found, skipping frontend build"
            mvn -e ${{ env.MAVEN_INFO }} ${{ env.MAVEN_PROXY_SETTINGS }} verify
          fi
      - name: Run Node tests
        if: ${{ env.FRONTEND_EXISTS == 'true' }}
        run: |
          echo "Running Node tests"
          cd target
          npm ci
          npm run test

      - name: Set artifact file name
        run: |
          echo "ARTIFACT_FILE_NAME=$(ls target/ | grep -o ".*.jar" | head -1)" >> $GITHUB_ENV

      - name: Compress build output
        run: tar czvf build_output.tar.gz target/${{ env.ARTIFACT_FILE_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build_output.tar.gz

      - name: Cache .m2/repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2